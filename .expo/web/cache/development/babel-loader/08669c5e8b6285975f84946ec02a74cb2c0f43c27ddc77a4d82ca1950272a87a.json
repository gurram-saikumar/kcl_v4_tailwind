{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _newAppScreen = require(\"@react-native/new-app-screen\");\nvar _reactNative = require(\"react-native\");\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _jsxFileName = \"/Users/nagasainathreddy/MyProject/App.tsx\";\nfunction App() {\n  var isDarkMode = (0, _reactNative.useColorScheme)() === \"dark\";\n  return (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaProvider, {\n    children: [(0, _jsxRuntime.jsx)(_reactNative.StatusBar, {\n      barStyle: isDarkMode ? \"light-content\" : \"dark-content\"\n    }), (0, _jsxRuntime.jsx)(AppContent, {})]\n  });\n}\nfunction AppContent() {\n  var safeAreaInsets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();\n  return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n    style: {\n      flex: 1,\n      backgroundColor: \"#fff\"\n    },\n    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n      style: {\n        fontSize: 24,\n        fontWeight: \"bold\",\n        textAlign: \"center\",\n        color: \"#2563eb\",\n        marginTop: 40\n      },\n      children: \"Hello NativeWind \\uD83C\\uDF89\"\n    }), (0, _jsxRuntime.jsx)(_newAppScreen.NewAppScreen, {\n      templateFileName: \"App.tsx\",\n      safeAreaInsets: safeAreaInsets\n    })]\n  });\n}\nvar _default = exports.default = App;","map":{"version":3,"names":["_newAppScreen","require","_reactNative","_reactNativeSafeAreaContext","_jsxRuntime","_jsxFileName","App","isDarkMode","useColorScheme","jsxs","SafeAreaProvider","children","jsx","StatusBar","barStyle","AppContent","safeAreaInsets","useSafeAreaInsets","View","style","flex","backgroundColor","Text","fontSize","fontWeight","textAlign","color","marginTop","NewAppScreen","templateFileName","_default","exports","default"],"sources":["/Users/nagasainathreddy/MyProject/App.tsx"],"sourcesContent":["import { NewAppScreen } from \"@react-native/new-app-screen\";\nimport { StatusBar, useColorScheme, View, Text } from \"react-native\";\nimport {\n  SafeAreaProvider,\n  useSafeAreaInsets,\n} from \"react-native-safe-area-context\";\n\nfunction App() {\n  const isDarkMode = useColorScheme() === \"dark\";\n\n  return (\n    <SafeAreaProvider>\n      <StatusBar barStyle={isDarkMode ? \"light-content\" : \"dark-content\"} />\n      <AppContent />\n    </SafeAreaProvider>\n  );\n}\n\nfunction AppContent() {\n  const safeAreaInsets = useSafeAreaInsets();\n\n  return (\n    <View style={{ flex: 1, backgroundColor: \"#fff\" }}>\n      {/* Example NativeWind usage */}\n      <Text style={{ fontSize: 24, fontWeight: \"bold\", textAlign: \"center\", color: \"#2563eb\", marginTop: 40 }}>\n        Hello NativeWind ðŸŽ‰\n      </Text>\n\n      {/* You can still use NewAppScreen */}\n      <NewAppScreen\n        templateFileName=\"App.tsx\"\n        safeAreaInsets={safeAreaInsets}\n      />\n    </View>\n  );\n}\n\nexport default App;\n"],"mappings":";;;;AAAA,IAAAA,aAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,2BAAA,GAAAF,OAAA;AAGwC,IAAAG,WAAA,GAAAH,OAAA;AAAA,IAAAI,YAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EACb,IAAMC,UAAU,GAAG,IAAAC,2BAAc,EAAC,CAAC,KAAK,MAAM;EAE9C,OACE,IAAAJ,WAAA,CAAAK,IAAA,EAACN,2BAAA,CAAAO,gBAAgB;IAAAC,QAAA,GACf,IAAAP,WAAA,CAAAQ,GAAA,EAACV,YAAA,CAAAW,SAAS;MAACC,QAAQ,EAAEP,UAAU,GAAG,eAAe,GAAG;IAAe,CAAE,CAAC,EACtE,IAAAH,WAAA,CAAAQ,GAAA,EAACG,UAAU,IAAE,CAAC;EAAA,CACE,CAAC;AAEvB;AAEA,SAASA,UAAUA,CAAA,EAAG;EACpB,IAAMC,cAAc,GAAG,IAAAC,6CAAiB,EAAC,CAAC;EAE1C,OACE,IAAAb,WAAA,CAAAK,IAAA,EAACP,YAAA,CAAAgB,IAAI;IAACC,KAAK,EAAE;MAAEC,IAAI,EAAE,CAAC;MAAEC,eAAe,EAAE;IAAO,CAAE;IAAAV,QAAA,GAEhD,IAAAP,WAAA,CAAAQ,GAAA,EAACV,YAAA,CAAAoB,IAAI;MAACH,KAAK,EAAE;QAAEI,QAAQ,EAAE,EAAE;QAAEC,UAAU,EAAE,MAAM;QAAEC,SAAS,EAAE,QAAQ;QAAEC,KAAK,EAAE,SAAS;QAAEC,SAAS,EAAE;MAAG,CAAE;MAAAhB,QAAA,EAAC;IAEzG,CAAM,CAAC,EAGP,IAAAP,WAAA,CAAAQ,GAAA,EAACZ,aAAA,CAAA4B,YAAY;MACXC,gBAAgB,EAAC,SAAS;MAC1Bb,cAAc,EAAEA;IAAe,CAChC,CAAC;EAAA,CACE,CAAC;AAEX;AAAC,IAAAc,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEc1B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}